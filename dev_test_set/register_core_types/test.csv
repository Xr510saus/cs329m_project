line,code,label
Line 1: void register_core_types() {,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
"Line 2: OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");","void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 3: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 4: //consistency check,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 5: static_assert(sizeof(Callable) <= 16);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 6: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 7: ObjectDB::setup();,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 8: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 9: StringName::setup();,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 10: _time = memnew(Time);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 11: ResourceLoader::initialize();,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 12: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 13: register_global_constants();,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 14: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 15: Variant::register_types();,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 16: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 17: CoreStringNames::create();,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 18: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 19: resource_format_po.instantiate();,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 20: ResourceLoader::add_resource_format_loader(resource_format_po);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 21: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 22: resource_saver_binary.instantiate();,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 23: ResourceSaver::add_resource_format_saver(resource_saver_binary);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 24: resource_loader_binary.instantiate();,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 25: ResourceLoader::add_resource_format_loader(resource_loader_binary);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 26: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 27: resource_format_importer.instantiate();,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 28: ResourceLoader::add_resource_format_loader(resource_format_importer);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 29: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 30: resource_format_importer_saver.instantiate();,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 31: ResourceSaver::add_resource_format_saver(resource_format_importer_saver);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 32: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 33: resource_format_image.instantiate();,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 34: ResourceLoader::add_resource_format_loader(resource_format_image);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 35: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 36: GDREGISTER_CLASS(Object);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 37: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 38: GDREGISTER_ABSTRACT_CLASS(Script);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 39: GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 40: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 41: GDREGISTER_VIRTUAL_CLASS(ScriptExtension);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 42: GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 43: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 44: GDREGISTER_CLASS(RefCounted);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 45: GDREGISTER_CLASS(WeakRef);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 46: GDREGISTER_CLASS(Resource);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 47: GDREGISTER_VIRTUAL_CLASS(MissingResource);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 48: GDREGISTER_CLASS(Image);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 49: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 50: GDREGISTER_CLASS(Shortcut);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 51: GDREGISTER_ABSTRACT_CLASS(InputEvent);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 52: GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 53: GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 54: GDREGISTER_CLASS(InputEventKey);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 55: GDREGISTER_CLASS(InputEventShortcut);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 56: GDREGISTER_ABSTRACT_CLASS(InputEventMouse);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 57: GDREGISTER_CLASS(InputEventMouseButton);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 58: GDREGISTER_CLASS(InputEventMouseMotion);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 59: GDREGISTER_CLASS(InputEventJoypadButton);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 60: GDREGISTER_CLASS(InputEventJoypadMotion);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 61: GDREGISTER_CLASS(InputEventScreenDrag);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 62: GDREGISTER_CLASS(InputEventScreenTouch);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 63: GDREGISTER_CLASS(InputEventAction);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 64: GDREGISTER_ABSTRACT_CLASS(InputEventGesture);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 65: GDREGISTER_CLASS(InputEventMagnifyGesture);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 66: GDREGISTER_CLASS(InputEventPanGesture);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 67: GDREGISTER_CLASS(InputEventMIDI);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 68: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 69: // Network,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 70: GDREGISTER_ABSTRACT_CLASS(IP);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 71: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 72: GDREGISTER_ABSTRACT_CLASS(StreamPeer);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 73: GDREGISTER_CLASS(StreamPeerExtension);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 74: GDREGISTER_CLASS(StreamPeerBuffer);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 75: GDREGISTER_CLASS(StreamPeerGZIP);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 76: GDREGISTER_CLASS(StreamPeerTCP);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 77: GDREGISTER_CLASS(TCPServer);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 78: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 79: GDREGISTER_ABSTRACT_CLASS(PacketPeer);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 80: GDREGISTER_CLASS(PacketPeerExtension);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 81: GDREGISTER_CLASS(PacketPeerStream);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 82: GDREGISTER_CLASS(PacketPeerUDP);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 83: GDREGISTER_CLASS(UDPServer);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 84: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 85: GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 86: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 87: ClassDB::register_custom_instance_class<HTTPClient>();,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 88: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 89: // Crypto,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 90: GDREGISTER_CLASS(HashingContext);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 91: GDREGISTER_CLASS(AESContext);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 92: ClassDB::register_custom_instance_class<X509Certificate>();,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 93: ClassDB::register_custom_instance_class<CryptoKey>();,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 94: GDREGISTER_ABSTRACT_CLASS(TLSOptions);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 95: ClassDB::register_custom_instance_class<HMACContext>();,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 96: ClassDB::register_custom_instance_class<Crypto>();,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 97: ClassDB::register_custom_instance_class<StreamPeerTLS>();,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 98: ClassDB::register_custom_instance_class<PacketPeerDTLS>();,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 99: ClassDB::register_custom_instance_class<DTLSServer>();,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 100: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 101: resource_format_saver_crypto.instantiate();,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 102: ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 103: resource_format_loader_crypto.instantiate();,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 104: ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 105: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 106: resource_loader_json.instantiate();,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 107: ResourceLoader::add_resource_format_loader(resource_loader_json);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 108: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 109: resource_saver_json.instantiate();,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 110: ResourceSaver::add_resource_format_saver(resource_saver_json);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 111: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 112: GDREGISTER_CLASS(MainLoop);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 113: GDREGISTER_CLASS(Translation);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 114: GDREGISTER_CLASS(TranslationDomain);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 115: GDREGISTER_CLASS(OptimizedTranslation);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 116: GDREGISTER_CLASS(UndoRedo);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 117: GDREGISTER_CLASS(TriangleMesh);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 118: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 119: GDREGISTER_CLASS(ResourceFormatLoader);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 120: GDREGISTER_CLASS(ResourceFormatSaver);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 121: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 122: GDREGISTER_ABSTRACT_CLASS(FileAccess);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 123: GDREGISTER_ABSTRACT_CLASS(DirAccess);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 124: GDREGISTER_CLASS(core_bind::Thread);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 125: GDREGISTER_CLASS(core_bind::Mutex);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 126: GDREGISTER_CLASS(core_bind::Semaphore);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 127: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 128: GDREGISTER_CLASS(XMLParser);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 129: GDREGISTER_CLASS(JSON);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 130: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 131: GDREGISTER_CLASS(ConfigFile);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 132: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 133: GDREGISTER_CLASS(PCKPacker);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 134: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 135: GDREGISTER_CLASS(PackedDataContainer);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 136: GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 137: GDREGISTER_CLASS(AStar3D);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 138: GDREGISTER_CLASS(AStar2D);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 139: GDREGISTER_CLASS(AStarGrid2D);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 140: GDREGISTER_CLASS(EncodedObjectAsID);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 141: GDREGISTER_CLASS(RandomNumberGenerator);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 142: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 143: GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 144: GDREGISTER_CLASS(ImageFormatLoaderExtension);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 145: GDREGISTER_ABSTRACT_CLASS(ResourceImporter);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 146: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 147: GDREGISTER_CLASS(GDExtension);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 148: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 149: GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 150: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 151: GDREGISTER_ABSTRACT_CLASS(ResourceUID);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 152: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 153: GDREGISTER_CLASS(EngineProfiler);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 154: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 155: resource_uid = memnew(ResourceUID);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 156: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 157: gdextension_manager = memnew(GDExtensionManager);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 158: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 159: resource_loader_gdextension.instantiate();,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 160: ResourceLoader::add_resource_format_loader(resource_loader_gdextension);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 161: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 162: ip = IP::create();,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 163: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 164: _geometry_2d = memnew(core_bind::Geometry2D);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 165: _geometry_3d = memnew(core_bind::Geometry3D);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 166: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 167: _resource_loader = memnew(core_bind::ResourceLoader);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 168: _resource_saver = memnew(core_bind::ResourceSaver);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 169: _os = memnew(core_bind::OS);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 170: _engine = memnew(core_bind::Engine);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 171: _classdb = memnew(core_bind::special::ClassDB);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 172: _marshalls = memnew(core_bind::Marshalls);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 173: _engine_debugger = memnew(core_bind::EngineDebugger);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 174: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
"Line 175: GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");","void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
"Line 176: GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");","void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
"Line 177: GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");","void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 178: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 179: worker_thread_pool = memnew(WorkerThreadPool);,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 180: ,"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
"Line 181: OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");","void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",1
Line 182: },"void register_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Types"");		//consistency check	static_assert(sizeof(Callable) <= 16);		ObjectDB::setup();		StringName::setup();	_time = memnew(Time);	ResourceLoader::initialize();		register_global_constants();		Variant::register_types();		CoreStringNames::create();		resource_format_po.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_po);		resource_saver_binary.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_binary);	resource_loader_binary.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_binary);		resource_format_importer.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_importer);		resource_format_importer_saver.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_importer_saver);		resource_format_image.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_image);		GDREGISTER_CLASS(Object);		GDREGISTER_ABSTRACT_CLASS(Script);	GDREGISTER_ABSTRACT_CLASS(ScriptLanguage);		GDREGISTER_VIRTUAL_CLASS(ScriptExtension);	GDREGISTER_VIRTUAL_CLASS(ScriptLanguageExtension);		GDREGISTER_CLASS(RefCounted);	GDREGISTER_CLASS(WeakRef);	GDREGISTER_CLASS(Resource);	GDREGISTER_VIRTUAL_CLASS(MissingResource);	GDREGISTER_CLASS(Image);		GDREGISTER_CLASS(Shortcut);	GDREGISTER_ABSTRACT_CLASS(InputEvent);	GDREGISTER_ABSTRACT_CLASS(InputEventWithModifiers);	GDREGISTER_ABSTRACT_CLASS(InputEventFromWindow);	GDREGISTER_CLASS(InputEventKey);	GDREGISTER_CLASS(InputEventShortcut);	GDREGISTER_ABSTRACT_CLASS(InputEventMouse);	GDREGISTER_CLASS(InputEventMouseButton);	GDREGISTER_CLASS(InputEventMouseMotion);	GDREGISTER_CLASS(InputEventJoypadButton);	GDREGISTER_CLASS(InputEventJoypadMotion);	GDREGISTER_CLASS(InputEventScreenDrag);	GDREGISTER_CLASS(InputEventScreenTouch);	GDREGISTER_CLASS(InputEventAction);	GDREGISTER_ABSTRACT_CLASS(InputEventGesture);	GDREGISTER_CLASS(InputEventMagnifyGesture);	GDREGISTER_CLASS(InputEventPanGesture);	GDREGISTER_CLASS(InputEventMIDI);		// Network	GDREGISTER_ABSTRACT_CLASS(IP);		GDREGISTER_ABSTRACT_CLASS(StreamPeer);	GDREGISTER_CLASS(StreamPeerExtension);	GDREGISTER_CLASS(StreamPeerBuffer);	GDREGISTER_CLASS(StreamPeerGZIP);	GDREGISTER_CLASS(StreamPeerTCP);	GDREGISTER_CLASS(TCPServer);		GDREGISTER_ABSTRACT_CLASS(PacketPeer);	GDREGISTER_CLASS(PacketPeerExtension);	GDREGISTER_CLASS(PacketPeerStream);	GDREGISTER_CLASS(PacketPeerUDP);	GDREGISTER_CLASS(UDPServer);		GDREGISTER_ABSTRACT_CLASS(WorkerThreadPool);		ClassDB::register_custom_instance_class<HTTPClient>();		// Crypto	GDREGISTER_CLASS(HashingContext);	GDREGISTER_CLASS(AESContext);	ClassDB::register_custom_instance_class<X509Certificate>();	ClassDB::register_custom_instance_class<CryptoKey>();	GDREGISTER_ABSTRACT_CLASS(TLSOptions);	ClassDB::register_custom_instance_class<HMACContext>();	ClassDB::register_custom_instance_class<Crypto>();	ClassDB::register_custom_instance_class<StreamPeerTLS>();	ClassDB::register_custom_instance_class<PacketPeerDTLS>();	ClassDB::register_custom_instance_class<DTLSServer>();		resource_format_saver_crypto.instantiate();	ResourceSaver::add_resource_format_saver(resource_format_saver_crypto);	resource_format_loader_crypto.instantiate();	ResourceLoader::add_resource_format_loader(resource_format_loader_crypto);		resource_loader_json.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_json);		resource_saver_json.instantiate();	ResourceSaver::add_resource_format_saver(resource_saver_json);		GDREGISTER_CLASS(MainLoop);	GDREGISTER_CLASS(Translation);	GDREGISTER_CLASS(TranslationDomain);	GDREGISTER_CLASS(OptimizedTranslation);	GDREGISTER_CLASS(UndoRedo);	GDREGISTER_CLASS(TriangleMesh);		GDREGISTER_CLASS(ResourceFormatLoader);	GDREGISTER_CLASS(ResourceFormatSaver);		GDREGISTER_ABSTRACT_CLASS(FileAccess);	GDREGISTER_ABSTRACT_CLASS(DirAccess);	GDREGISTER_CLASS(core_bind::Thread);	GDREGISTER_CLASS(core_bind::Mutex);	GDREGISTER_CLASS(core_bind::Semaphore);		GDREGISTER_CLASS(XMLParser);	GDREGISTER_CLASS(JSON);		GDREGISTER_CLASS(ConfigFile);		GDREGISTER_CLASS(PCKPacker);		GDREGISTER_CLASS(PackedDataContainer);	GDREGISTER_ABSTRACT_CLASS(PackedDataContainerRef);	GDREGISTER_CLASS(AStar3D);	GDREGISTER_CLASS(AStar2D);	GDREGISTER_CLASS(AStarGrid2D);	GDREGISTER_CLASS(EncodedObjectAsID);	GDREGISTER_CLASS(RandomNumberGenerator);		GDREGISTER_ABSTRACT_CLASS(ImageFormatLoader);	GDREGISTER_CLASS(ImageFormatLoaderExtension);	GDREGISTER_ABSTRACT_CLASS(ResourceImporter);		GDREGISTER_CLASS(GDExtension);		GDREGISTER_ABSTRACT_CLASS(GDExtensionManager);		GDREGISTER_ABSTRACT_CLASS(ResourceUID);		GDREGISTER_CLASS(EngineProfiler);		resource_uid = memnew(ResourceUID);		gdextension_manager = memnew(GDExtensionManager);		resource_loader_gdextension.instantiate();	ResourceLoader::add_resource_format_loader(resource_loader_gdextension);		ip = IP::create();		_geometry_2d = memnew(core_bind::Geometry2D);	_geometry_3d = memnew(core_bind::Geometry3D);		_resource_loader = memnew(core_bind::ResourceLoader);	_resource_saver = memnew(core_bind::ResourceSaver);	_os = memnew(core_bind::OS);	_engine = memnew(core_bind::Engine);	_classdb = memnew(core_bind::special::ClassDB);	_marshalls = memnew(core_bind::Marshalls);	_engine_debugger = memnew(core_bind::EngineDebugger);		GDREGISTER_NATIVE_STRUCT(ObjectID, ""uint64_t id = 0"");	GDREGISTER_NATIVE_STRUCT(AudioFrame, ""float left;float right"");	GDREGISTER_NATIVE_STRUCT(ScriptLanguageExtensionProfilingInfo, ""StringName signature;uint64_t call_count;uint64_t total_time;uint64_t self_time"");		worker_thread_pool = memnew(WorkerThreadPool);		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Types"");	}",0
Line 1: void register_core_settings() {,"void register_core_settings() {	// Since in register core types, globals may not be present.	GLOBAL_DEF(PropertyInfo(Variant::INT, ""network/limits/tcp/connect_timeout_seconds"", PROPERTY_HINT_RANGE, ""1,1800,1""), (30));	GLOBAL_DEF_RST(PropertyInfo(Variant::INT, ""network/limits/packet_peer_stream/max_buffer_po2"", PROPERTY_HINT_RANGE, ""0,64,1,or_greater""), (16));	GLOBAL_DEF(PropertyInfo(Variant::STRING, ""network/tls/certificate_bundle_override"", PROPERTY_HINT_FILE, ""*.crt""), """");		GLOBAL_DEF(""threading/worker_pool/max_threads"", -1);	GLOBAL_DEF(""threading/worker_pool/low_priority_thread_ratio"", 0.3);	}",0
"Line 2: // Since in register core types, globals may not be present.","void register_core_settings() {	// Since in register core types, globals may not be present.	GLOBAL_DEF(PropertyInfo(Variant::INT, ""network/limits/tcp/connect_timeout_seconds"", PROPERTY_HINT_RANGE, ""1,1800,1""), (30));	GLOBAL_DEF_RST(PropertyInfo(Variant::INT, ""network/limits/packet_peer_stream/max_buffer_po2"", PROPERTY_HINT_RANGE, ""0,64,1,or_greater""), (16));	GLOBAL_DEF(PropertyInfo(Variant::STRING, ""network/tls/certificate_bundle_override"", PROPERTY_HINT_FILE, ""*.crt""), """");		GLOBAL_DEF(""threading/worker_pool/max_threads"", -1);	GLOBAL_DEF(""threading/worker_pool/low_priority_thread_ratio"", 0.3);	}",0
"Line 3: GLOBAL_DEF(PropertyInfo(Variant::INT, ""network/limits/tcp/connect_timeout_seconds"", PROPERTY_HINT_RANGE, ""1,1800,1""), (30));","void register_core_settings() {	// Since in register core types, globals may not be present.	GLOBAL_DEF(PropertyInfo(Variant::INT, ""network/limits/tcp/connect_timeout_seconds"", PROPERTY_HINT_RANGE, ""1,1800,1""), (30));	GLOBAL_DEF_RST(PropertyInfo(Variant::INT, ""network/limits/packet_peer_stream/max_buffer_po2"", PROPERTY_HINT_RANGE, ""0,64,1,or_greater""), (16));	GLOBAL_DEF(PropertyInfo(Variant::STRING, ""network/tls/certificate_bundle_override"", PROPERTY_HINT_FILE, ""*.crt""), """");		GLOBAL_DEF(""threading/worker_pool/max_threads"", -1);	GLOBAL_DEF(""threading/worker_pool/low_priority_thread_ratio"", 0.3);	}",1
"Line 4: GLOBAL_DEF_RST(PropertyInfo(Variant::INT, ""network/limits/packet_peer_stream/max_buffer_po2"", PROPERTY_HINT_RANGE, ""0,64,1,or_greater""), (16));","void register_core_settings() {	// Since in register core types, globals may not be present.	GLOBAL_DEF(PropertyInfo(Variant::INT, ""network/limits/tcp/connect_timeout_seconds"", PROPERTY_HINT_RANGE, ""1,1800,1""), (30));	GLOBAL_DEF_RST(PropertyInfo(Variant::INT, ""network/limits/packet_peer_stream/max_buffer_po2"", PROPERTY_HINT_RANGE, ""0,64,1,or_greater""), (16));	GLOBAL_DEF(PropertyInfo(Variant::STRING, ""network/tls/certificate_bundle_override"", PROPERTY_HINT_FILE, ""*.crt""), """");		GLOBAL_DEF(""threading/worker_pool/max_threads"", -1);	GLOBAL_DEF(""threading/worker_pool/low_priority_thread_ratio"", 0.3);	}",1
"Line 5: GLOBAL_DEF(PropertyInfo(Variant::STRING, ""network/tls/certificate_bundle_override"", PROPERTY_HINT_FILE, ""*.crt""), """");","void register_core_settings() {	// Since in register core types, globals may not be present.	GLOBAL_DEF(PropertyInfo(Variant::INT, ""network/limits/tcp/connect_timeout_seconds"", PROPERTY_HINT_RANGE, ""1,1800,1""), (30));	GLOBAL_DEF_RST(PropertyInfo(Variant::INT, ""network/limits/packet_peer_stream/max_buffer_po2"", PROPERTY_HINT_RANGE, ""0,64,1,or_greater""), (16));	GLOBAL_DEF(PropertyInfo(Variant::STRING, ""network/tls/certificate_bundle_override"", PROPERTY_HINT_FILE, ""*.crt""), """");		GLOBAL_DEF(""threading/worker_pool/max_threads"", -1);	GLOBAL_DEF(""threading/worker_pool/low_priority_thread_ratio"", 0.3);	}",1
Line 6: ,"void register_core_settings() {	// Since in register core types, globals may not be present.	GLOBAL_DEF(PropertyInfo(Variant::INT, ""network/limits/tcp/connect_timeout_seconds"", PROPERTY_HINT_RANGE, ""1,1800,1""), (30));	GLOBAL_DEF_RST(PropertyInfo(Variant::INT, ""network/limits/packet_peer_stream/max_buffer_po2"", PROPERTY_HINT_RANGE, ""0,64,1,or_greater""), (16));	GLOBAL_DEF(PropertyInfo(Variant::STRING, ""network/tls/certificate_bundle_override"", PROPERTY_HINT_FILE, ""*.crt""), """");		GLOBAL_DEF(""threading/worker_pool/max_threads"", -1);	GLOBAL_DEF(""threading/worker_pool/low_priority_thread_ratio"", 0.3);	}",0
"Line 7: GLOBAL_DEF(""threading/worker_pool/max_threads"", -1);","void register_core_settings() {	// Since in register core types, globals may not be present.	GLOBAL_DEF(PropertyInfo(Variant::INT, ""network/limits/tcp/connect_timeout_seconds"", PROPERTY_HINT_RANGE, ""1,1800,1""), (30));	GLOBAL_DEF_RST(PropertyInfo(Variant::INT, ""network/limits/packet_peer_stream/max_buffer_po2"", PROPERTY_HINT_RANGE, ""0,64,1,or_greater""), (16));	GLOBAL_DEF(PropertyInfo(Variant::STRING, ""network/tls/certificate_bundle_override"", PROPERTY_HINT_FILE, ""*.crt""), """");		GLOBAL_DEF(""threading/worker_pool/max_threads"", -1);	GLOBAL_DEF(""threading/worker_pool/low_priority_thread_ratio"", 0.3);	}",1
"Line 8: GLOBAL_DEF(""threading/worker_pool/low_priority_thread_ratio"", 0.3);","void register_core_settings() {	// Since in register core types, globals may not be present.	GLOBAL_DEF(PropertyInfo(Variant::INT, ""network/limits/tcp/connect_timeout_seconds"", PROPERTY_HINT_RANGE, ""1,1800,1""), (30));	GLOBAL_DEF_RST(PropertyInfo(Variant::INT, ""network/limits/packet_peer_stream/max_buffer_po2"", PROPERTY_HINT_RANGE, ""0,64,1,or_greater""), (16));	GLOBAL_DEF(PropertyInfo(Variant::STRING, ""network/tls/certificate_bundle_override"", PROPERTY_HINT_FILE, ""*.crt""), """");		GLOBAL_DEF(""threading/worker_pool/max_threads"", -1);	GLOBAL_DEF(""threading/worker_pool/low_priority_thread_ratio"", 0.3);	}",1
Line 9: },"void register_core_settings() {	// Since in register core types, globals may not be present.	GLOBAL_DEF(PropertyInfo(Variant::INT, ""network/limits/tcp/connect_timeout_seconds"", PROPERTY_HINT_RANGE, ""1,1800,1""), (30));	GLOBAL_DEF_RST(PropertyInfo(Variant::INT, ""network/limits/packet_peer_stream/max_buffer_po2"", PROPERTY_HINT_RANGE, ""0,64,1,or_greater""), (16));	GLOBAL_DEF(PropertyInfo(Variant::STRING, ""network/tls/certificate_bundle_override"", PROPERTY_HINT_FILE, ""*.crt""), """");		GLOBAL_DEF(""threading/worker_pool/max_threads"", -1);	GLOBAL_DEF(""threading/worker_pool/low_priority_thread_ratio"", 0.3);	}",0
Line 1: void register_core_singletons() {,"void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",0
"Line 2: OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");","void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",1
Line 3: ,"void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",0
Line 4: GDREGISTER_CLASS(ProjectSettings);,"void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",1
Line 5: GDREGISTER_ABSTRACT_CLASS(IP);,"void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",1
Line 6: GDREGISTER_CLASS(core_bind::Geometry2D);,"void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",1
Line 7: GDREGISTER_CLASS(core_bind::Geometry3D);,"void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",1
Line 8: GDREGISTER_CLASS(core_bind::ResourceLoader);,"void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",1
Line 9: GDREGISTER_CLASS(core_bind::ResourceSaver);,"void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",1
Line 10: GDREGISTER_CLASS(core_bind::OS);,"void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",1
Line 11: GDREGISTER_CLASS(core_bind::Engine);,"void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",1
Line 12: GDREGISTER_CLASS(core_bind::special::ClassDB);,"void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",1
Line 13: GDREGISTER_CLASS(core_bind::Marshalls);,"void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",1
Line 14: GDREGISTER_CLASS(TranslationServer);,"void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",1
Line 15: GDREGISTER_ABSTRACT_CLASS(Input);,"void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",1
Line 16: GDREGISTER_CLASS(InputMap);,"void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",1
Line 17: GDREGISTER_CLASS(Expression);,"void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",1
Line 18: GDREGISTER_CLASS(core_bind::EngineDebugger);,"void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",1
Line 19: GDREGISTER_CLASS(Time);,"void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",1
Line 20: ,"void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",0
"Line 21: Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));","void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",1
"Line 22: Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));","void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",1
"Line 23: Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));","void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",1
"Line 24: Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));","void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",1
"Line 25: Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));","void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",1
"Line 26: Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));","void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",1
"Line 27: Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));","void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",1
"Line 28: Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));","void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",1
"Line 29: Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));","void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",1
"Line 30: Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));","void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",1
"Line 31: Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));","void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",1
"Line 32: Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));","void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",1
"Line 33: Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));","void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",1
"Line 34: Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));","void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",1
"Line 35: Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));","void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",1
"Line 36: Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));","void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",1
"Line 37: Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));","void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",1
"Line 38: Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));","void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",1
Line 39: ,"void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",0
"Line 40: OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");","void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",1
Line 41: },"void register_core_singletons() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Singletons"");		GDREGISTER_CLASS(ProjectSettings);	GDREGISTER_ABSTRACT_CLASS(IP);	GDREGISTER_CLASS(core_bind::Geometry2D);	GDREGISTER_CLASS(core_bind::Geometry3D);	GDREGISTER_CLASS(core_bind::ResourceLoader);	GDREGISTER_CLASS(core_bind::ResourceSaver);	GDREGISTER_CLASS(core_bind::OS);	GDREGISTER_CLASS(core_bind::Engine);	GDREGISTER_CLASS(core_bind::special::ClassDB);	GDREGISTER_CLASS(core_bind::Marshalls);	GDREGISTER_CLASS(TranslationServer);	GDREGISTER_ABSTRACT_CLASS(Input);	GDREGISTER_CLASS(InputMap);	GDREGISTER_CLASS(Expression);	GDREGISTER_CLASS(core_bind::EngineDebugger);	GDREGISTER_CLASS(Time);		Engine::get_singleton()->add_singleton(Engine::Singleton(""ProjectSettings"", ProjectSettings::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""IP"", IP::get_singleton(), ""IP""));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry2D"", core_bind::Geometry2D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Geometry3D"", core_bind::Geometry3D::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceLoader"", core_bind::ResourceLoader::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceSaver"", core_bind::ResourceSaver::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""OS"", core_bind::OS::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Engine"", core_bind::Engine::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ClassDB"", _classdb));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Marshalls"", core_bind::Marshalls::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""TranslationServer"", TranslationServer::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Input"", Input::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""InputMap"", InputMap::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""EngineDebugger"", core_bind::EngineDebugger::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""Time"", Time::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""GDExtensionManager"", GDExtensionManager::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""ResourceUID"", ResourceUID::get_singleton()));	Engine::get_singleton()->add_singleton(Engine::Singleton(""WorkerThreadPool"", worker_thread_pool));		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Singletons"");	}",0
Line 1: void register_core_extensions() {,"void register_core_extensions() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Extensions"");		// Hardcoded for now.	GDExtension::initialize_gdextensions();	gdextension_manager->load_extensions();	gdextension_manager->initialize_extensions(GDExtension::INITIALIZATION_LEVEL_CORE);	_is_core_extensions_registered = true;		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Extensions"");	}",0
"Line 2: OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Extensions"");","void register_core_extensions() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Extensions"");		// Hardcoded for now.	GDExtension::initialize_gdextensions();	gdextension_manager->load_extensions();	gdextension_manager->initialize_extensions(GDExtension::INITIALIZATION_LEVEL_CORE);	_is_core_extensions_registered = true;		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Extensions"");	}",1
Line 3: ,"void register_core_extensions() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Extensions"");		// Hardcoded for now.	GDExtension::initialize_gdextensions();	gdextension_manager->load_extensions();	gdextension_manager->initialize_extensions(GDExtension::INITIALIZATION_LEVEL_CORE);	_is_core_extensions_registered = true;		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Extensions"");	}",0
Line 4: // Hardcoded for now.,"void register_core_extensions() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Extensions"");		// Hardcoded for now.	GDExtension::initialize_gdextensions();	gdextension_manager->load_extensions();	gdextension_manager->initialize_extensions(GDExtension::INITIALIZATION_LEVEL_CORE);	_is_core_extensions_registered = true;		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Extensions"");	}",0
Line 5: GDExtension::initialize_gdextensions();,"void register_core_extensions() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Extensions"");		// Hardcoded for now.	GDExtension::initialize_gdextensions();	gdextension_manager->load_extensions();	gdextension_manager->initialize_extensions(GDExtension::INITIALIZATION_LEVEL_CORE);	_is_core_extensions_registered = true;		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Extensions"");	}",1
Line 6: gdextension_manager->load_extensions();,"void register_core_extensions() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Extensions"");		// Hardcoded for now.	GDExtension::initialize_gdextensions();	gdextension_manager->load_extensions();	gdextension_manager->initialize_extensions(GDExtension::INITIALIZATION_LEVEL_CORE);	_is_core_extensions_registered = true;		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Extensions"");	}",1
Line 7: gdextension_manager->initialize_extensions(GDExtension::INITIALIZATION_LEVEL_CORE);,"void register_core_extensions() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Extensions"");		// Hardcoded for now.	GDExtension::initialize_gdextensions();	gdextension_manager->load_extensions();	gdextension_manager->initialize_extensions(GDExtension::INITIALIZATION_LEVEL_CORE);	_is_core_extensions_registered = true;		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Extensions"");	}",1
Line 8: _is_core_extensions_registered = true;,"void register_core_extensions() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Extensions"");		// Hardcoded for now.	GDExtension::initialize_gdextensions();	gdextension_manager->load_extensions();	gdextension_manager->initialize_extensions(GDExtension::INITIALIZATION_LEVEL_CORE);	_is_core_extensions_registered = true;		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Extensions"");	}",1
Line 9: ,"void register_core_extensions() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Extensions"");		// Hardcoded for now.	GDExtension::initialize_gdextensions();	gdextension_manager->load_extensions();	gdextension_manager->initialize_extensions(GDExtension::INITIALIZATION_LEVEL_CORE);	_is_core_extensions_registered = true;		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Extensions"");	}",0
"Line 10: OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Extensions"");","void register_core_extensions() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Extensions"");		// Hardcoded for now.	GDExtension::initialize_gdextensions();	gdextension_manager->load_extensions();	gdextension_manager->initialize_extensions(GDExtension::INITIALIZATION_LEVEL_CORE);	_is_core_extensions_registered = true;		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Extensions"");	}",1
Line 11: },"void register_core_extensions() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Register Extensions"");		// Hardcoded for now.	GDExtension::initialize_gdextensions();	gdextension_manager->load_extensions();	gdextension_manager->initialize_extensions(GDExtension::INITIALIZATION_LEVEL_CORE);	_is_core_extensions_registered = true;		OS::get_singleton()->benchmark_end_measure(""Core"", ""Register Extensions"");	}",0
Line 1: void unregister_core_extensions() {,"void unregister_core_extensions() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Extensions"");		if (_is_core_extensions_registered) {	gdextension_manager->deinitialize_extensions(GDExtension::INITIALIZATION_LEVEL_CORE);	}	GDExtension::finalize_gdextensions();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Extensions"");	}",0
"Line 2: OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Extensions"");","void unregister_core_extensions() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Extensions"");		if (_is_core_extensions_registered) {	gdextension_manager->deinitialize_extensions(GDExtension::INITIALIZATION_LEVEL_CORE);	}	GDExtension::finalize_gdextensions();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Extensions"");	}",1
Line 3: ,"void unregister_core_extensions() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Extensions"");		if (_is_core_extensions_registered) {	gdextension_manager->deinitialize_extensions(GDExtension::INITIALIZATION_LEVEL_CORE);	}	GDExtension::finalize_gdextensions();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Extensions"");	}",0
Line 4: if (_is_core_extensions_registered) {,"void unregister_core_extensions() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Extensions"");		if (_is_core_extensions_registered) {	gdextension_manager->deinitialize_extensions(GDExtension::INITIALIZATION_LEVEL_CORE);	}	GDExtension::finalize_gdextensions();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Extensions"");	}",1
Line 5: gdextension_manager->deinitialize_extensions(GDExtension::INITIALIZATION_LEVEL_CORE);,"void unregister_core_extensions() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Extensions"");		if (_is_core_extensions_registered) {	gdextension_manager->deinitialize_extensions(GDExtension::INITIALIZATION_LEVEL_CORE);	}	GDExtension::finalize_gdextensions();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Extensions"");	}",1
Line 6: },"void unregister_core_extensions() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Extensions"");		if (_is_core_extensions_registered) {	gdextension_manager->deinitialize_extensions(GDExtension::INITIALIZATION_LEVEL_CORE);	}	GDExtension::finalize_gdextensions();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Extensions"");	}",0
Line 7: GDExtension::finalize_gdextensions();,"void unregister_core_extensions() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Extensions"");		if (_is_core_extensions_registered) {	gdextension_manager->deinitialize_extensions(GDExtension::INITIALIZATION_LEVEL_CORE);	}	GDExtension::finalize_gdextensions();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Extensions"");	}",1
Line 8: ,"void unregister_core_extensions() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Extensions"");		if (_is_core_extensions_registered) {	gdextension_manager->deinitialize_extensions(GDExtension::INITIALIZATION_LEVEL_CORE);	}	GDExtension::finalize_gdextensions();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Extensions"");	}",0
"Line 9: OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Extensions"");","void unregister_core_extensions() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Extensions"");		if (_is_core_extensions_registered) {	gdextension_manager->deinitialize_extensions(GDExtension::INITIALIZATION_LEVEL_CORE);	}	GDExtension::finalize_gdextensions();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Extensions"");	}",1
Line 10: },"void unregister_core_extensions() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Extensions"");		if (_is_core_extensions_registered) {	gdextension_manager->deinitialize_extensions(GDExtension::INITIALIZATION_LEVEL_CORE);	}	GDExtension::finalize_gdextensions();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Extensions"");	}",0
Line 1: void unregister_core_types() {,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",0
"Line 2: OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");","void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 3: ,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",0
Line 4: // Destroy singletons in reverse order to ensure dependencies are not broken.,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",0
Line 5: ,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",0
Line 6: memdelete(worker_thread_pool);,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 7: ,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",0
Line 8: memdelete(_engine_debugger);,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 9: memdelete(_marshalls);,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 10: memdelete(_classdb);,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 11: memdelete(_engine);,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 12: memdelete(_os);,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 13: memdelete(_resource_saver);,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 14: memdelete(_resource_loader);,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 15: ,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",0
Line 16: memdelete(_geometry_3d);,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 17: memdelete(_geometry_2d);,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 18: ,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",0
Line 19: memdelete(gdextension_manager);,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 20: ,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",0
Line 21: memdelete(resource_uid);,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 22: ,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",0
Line 23: if (ip) {,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",0
Line 24: memdelete(ip);,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 25: },"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",0
Line 26: ,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",0
Line 27: ResourceLoader::remove_resource_format_loader(resource_format_image);,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 28: resource_format_image.unref();,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 29: ,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",0
Line 30: ResourceSaver::remove_resource_format_saver(resource_saver_binary);,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 31: resource_saver_binary.unref();,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 32: ,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",0
Line 33: ResourceLoader::remove_resource_format_loader(resource_loader_binary);,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 34: resource_loader_binary.unref();,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 35: ,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",0
Line 36: ResourceLoader::remove_resource_format_loader(resource_format_importer);,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 37: resource_format_importer.unref();,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 38: ,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",0
Line 39: ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 40: resource_format_importer_saver.unref();,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 41: ,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",0
Line 42: ResourceLoader::remove_resource_format_loader(resource_format_po);,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 43: resource_format_po.unref();,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 44: ,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",0
Line 45: ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 46: resource_format_saver_crypto.unref();,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 47: ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 48: resource_format_loader_crypto.unref();,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 49: ,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",0
Line 50: ResourceSaver::remove_resource_format_saver(resource_saver_json);,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 51: resource_saver_json.unref();,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 52: ,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",0
Line 53: ResourceLoader::remove_resource_format_loader(resource_loader_json);,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 54: resource_loader_json.unref();,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 55: ,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",0
Line 56: ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 57: resource_loader_gdextension.unref();,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 58: ,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",0
Line 59: ResourceLoader::finalize();,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 60: ,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",0
Line 61: ClassDB::cleanup_defaults();,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 62: memdelete(_time);,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 63: ObjectDB::cleanup();,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 64: ,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",0
Line 65: Variant::unregister_types();,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 66: ,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",0
Line 67: unregister_global_constants();,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 68: ,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",0
Line 69: ResourceCache::clear();,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 70: ClassDB::cleanup();,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 71: CoreStringNames::free();,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 72: StringName::cleanup();,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 73: ,"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",0
"Line 74: OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");","void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",1
Line 75: },"void unregister_core_types() {	OS::get_singleton()->benchmark_begin_measure(""Core"", ""Unregister Types"");		// Destroy singletons in reverse order to ensure dependencies are not broken.		memdelete(worker_thread_pool);		memdelete(_engine_debugger);	memdelete(_marshalls);	memdelete(_classdb);	memdelete(_engine);	memdelete(_os);	memdelete(_resource_saver);	memdelete(_resource_loader);		memdelete(_geometry_3d);	memdelete(_geometry_2d);		memdelete(gdextension_manager);		memdelete(resource_uid);		if (ip) {	memdelete(ip);	}		ResourceLoader::remove_resource_format_loader(resource_format_image);	resource_format_image.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_binary);	resource_saver_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_binary);	resource_loader_binary.unref();		ResourceLoader::remove_resource_format_loader(resource_format_importer);	resource_format_importer.unref();		ResourceSaver::remove_resource_format_saver(resource_format_importer_saver);	resource_format_importer_saver.unref();		ResourceLoader::remove_resource_format_loader(resource_format_po);	resource_format_po.unref();		ResourceSaver::remove_resource_format_saver(resource_format_saver_crypto);	resource_format_saver_crypto.unref();	ResourceLoader::remove_resource_format_loader(resource_format_loader_crypto);	resource_format_loader_crypto.unref();		ResourceSaver::remove_resource_format_saver(resource_saver_json);	resource_saver_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_json);	resource_loader_json.unref();		ResourceLoader::remove_resource_format_loader(resource_loader_gdextension);	resource_loader_gdextension.unref();		ResourceLoader::finalize();		ClassDB::cleanup_defaults();	memdelete(_time);	ObjectDB::cleanup();		Variant::unregister_types();		unregister_global_constants();		ResourceCache::clear();	ClassDB::cleanup();	CoreStringNames::free();	StringName::cleanup();		OS::get_singleton()->benchmark_end_measure(""Core"", ""Unregister Types"");	}",0
